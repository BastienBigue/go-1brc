<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>strconv.ryuDigits (10 samples, 1.91%)</title><rect x="973.4" y="101" width="22.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="976.40" y="111.5" >s..</text>
</g>
<g >
<title>log.init.0.func1 (12 samples, 2.29%)</title><rect x="10.0" y="213" width="27.1" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >l..</text>
</g>
<g >
<title>runtime.notesleep (8 samples, 1.53%)</title><rect x="1122.3" y="181" width="18.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1125.31" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (1 samples, 0.19%)</title><rect x="1104.3" y="229" width="2.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1107.26" y="239.5" ></text>
</g>
<g >
<title>runtime.wakep (3 samples, 0.57%)</title><rect x="1181.0" y="197" width="6.7" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1183.98" y="207.5" ></text>
</g>
<g >
<title>strconv.mult128bitPow10 (2 samples, 0.38%)</title><rect x="968.9" y="101" width="4.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="971.89" y="111.5" ></text>
</g>
<g >
<title>syscall.RawSyscall6 (170 samples, 32.50%)</title><rect x="145.4" y="85" width="383.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="148.37" y="95.5" >syscall.RawSyscall6</text>
</g>
<g >
<title>syscall.Write (12 samples, 2.29%)</title><rect x="10.0" y="165" width="27.1" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >s..</text>
</g>
<g >
<title>time.Time.abs (2 samples, 0.38%)</title><rect x="547.0" y="117" width="4.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="549.98" y="127.5" ></text>
</g>
<g >
<title>time.Time.Clock (1 samples, 0.19%)</title><rect x="86.7" y="133" width="2.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="89.71" y="143.5" ></text>
</g>
<g >
<title>runtime.resetspinning (3 samples, 0.57%)</title><rect x="1181.0" y="213" width="6.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1183.98" y="223.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.19%)</title><rect x="1090.7" y="197" width="2.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1093.73" y="207.5" ></text>
</g>
<g >
<title>runtime.reentersyscall (2 samples, 0.38%)</title><rect x="129.6" y="69" width="4.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="132.58" y="79.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.19%)</title><rect x="1023.0" y="85" width="2.3" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1026.04" y="95.5" ></text>
</g>
<g >
<title>log/slog/internal/buffer.(*Buffer).Free (3 samples, 0.57%)</title><rect x="849.3" y="181" width="6.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="852.31" y="191.5" ></text>
</g>
<g >
<title>runtime.wirep (1 samples, 0.19%)</title><rect x="143.1" y="53" width="2.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="146.12" y="63.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.19%)</title><rect x="1023.0" y="37" width="2.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1026.04" y="47.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (5 samples, 0.96%)</title><rect x="134.1" y="85" width="11.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="137.09" y="95.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.19%)</title><rect x="1106.5" y="229" width="2.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1109.52" y="239.5" ></text>
</g>
<g >
<title>runtime.mallocgc (5 samples, 0.96%)</title><rect x="1061.4" y="197" width="11.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1064.40" y="207.5" ></text>
</g>
<g >
<title>sync.runtime_procUnpin (1 samples, 0.19%)</title><rect x="562.8" y="133" width="2.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="565.77" y="143.5" ></text>
</g>
<g >
<title>runtime.(*timeHistogram).record (1 samples, 0.19%)</title><rect x="138.6" y="53" width="2.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="141.60" y="63.5" ></text>
</g>
<g >
<title>runtime.(*randomEnum).next (2 samples, 0.38%)</title><rect x="1117.8" y="197" width="4.5" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1120.80" y="207.5" ></text>
</g>
<g >
<title>fmt.(*fmt).fmtInteger (7 samples, 1.34%)</title><rect x="996.0" y="149" width="15.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="998.97" y="159.5" ></text>
</g>
<g >
<title>sync.(*Pool).pin (1 samples, 0.19%)</title><rect x="1020.8" y="165" width="2.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1023.78" y="175.5" ></text>
</g>
<g >
<title>sync.runtime_SemacquireMutex (1 samples, 0.19%)</title><rect x="578.6" y="133" width="2.2" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="581.57" y="143.5" ></text>
</g>
<g >
<title>runtime.procyield (115 samples, 21.99%)</title><rect x="580.8" y="117" width="259.5" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="583.82" y="127.5" >runtime.procyield</text>
</g>
<g >
<title>runtime.(*pallocBits).summarize (1 samples, 0.19%)</title><rect x="1104.3" y="133" width="2.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1107.26" y="143.5" ></text>
</g>
<g >
<title>main.(*ChunkReader).processBuffer (468 samples, 89.48%)</title><rect x="43.8" y="245" width="1056.0" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="46.84" y="255.5" >main.(*ChunkReader).processBuffer</text>
</g>
<g >
<title>runtime.scanobject (2 samples, 0.38%)</title><rect x="1108.8" y="197" width="4.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1111.78" y="207.5" ></text>
</g>
<g >
<title>fmt.(*pp).fmtFloat (17 samples, 3.25%)</title><rect x="957.6" y="165" width="38.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="960.61" y="175.5" >fmt..</text>
</g>
<g >
<title>fmt.(*fmt).fmtS (2 samples, 0.38%)</title><rect x="1011.8" y="149" width="4.5" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1014.76" y="159.5" ></text>
</g>
<g >
<title>runtime.entersyscall (4 samples, 0.76%)</title><rect x="125.1" y="85" width="9.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="128.07" y="95.5" ></text>
</g>
<g >
<title>log.getBuffer (3 samples, 0.57%)</title><rect x="558.3" y="165" width="6.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="561.26" y="175.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).writeLock (5 samples, 0.96%)</title><rect x="113.8" y="133" width="11.3" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="116.79" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.19%)</title><rect x="1029.8" y="165" width="2.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1032.81" y="175.5" ></text>
</g>
<g >
<title>math.archMax (2 samples, 0.38%)</title><rect x="1052.4" y="197" width="4.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1055.37" y="207.5" ></text>
</g>
<g >
<title>runtime.schedule (33 samples, 6.31%)</title><rect x="1113.3" y="229" width="74.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1116.29" y="239.5" >runtime...</text>
</g>
<g >
<title>fmt.Sprintf (3 samples, 0.57%)</title><rect x="37.1" y="245" width="6.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="40.07" y="255.5" ></text>
</g>
<g >
<title>fmt.(*pp).fmtString (2 samples, 0.38%)</title><rect x="1011.8" y="165" width="4.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1014.76" y="175.5" ></text>
</g>
<g >
<title>time.Time.Date (6 samples, 1.15%)</title><rect x="544.7" y="149" width="13.6" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="547.72" y="159.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.19%)</title><rect x="867.4" y="181" width="2.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="870.36" y="191.5" ></text>
</g>
<g >
<title>main.(*MinMaxAverage).updateWith (2 samples, 0.38%)</title><rect x="1045.6" y="213" width="4.5" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1048.60" y="223.5" ></text>
</g>
<g >
<title>syscall.write (179 samples, 34.23%)</title><rect x="125.1" y="117" width="403.8" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="128.07" y="127.5" >syscall.write</text>
</g>
<g >
<title>runtime.duffzero (1 samples, 0.19%)</title><rect x="892.2" y="149" width="2.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="895.18" y="159.5" ></text>
</g>
<g >
<title>sync.(*poolDequeue).popHead (1 samples, 0.19%)</title><rect x="858.3" y="133" width="2.3" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="861.34" y="143.5" ></text>
</g>
<g >
<title>runtime.usleep (11 samples, 2.10%)</title><rect x="1156.2" y="149" width="24.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1159.16" y="159.5" >r..</text>
</g>
<g >
<title>log/slog/internal/buffer.(*Buffer).WriteString (2 samples, 0.38%)</title><rect x="865.1" y="197" width="4.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="868.11" y="207.5" ></text>
</g>
<g >
<title>runtime.mapaccess2_faststr (5 samples, 0.96%)</title><rect x="1074.9" y="213" width="11.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1077.93" y="223.5" ></text>
</g>
<g >
<title>fmt.(*pp).doPrintf (30 samples, 5.74%)</title><rect x="948.6" y="197" width="67.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="951.59" y="207.5" >fmt.(*p..</text>
</g>
<g >
<title>runtime.futexsleep (8 samples, 1.53%)</title><rect x="1122.3" y="165" width="18.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1125.31" y="175.5" ></text>
</g>
<g >
<title>strconv.AppendFloat (16 samples, 3.06%)</title><rect x="959.9" y="149" width="36.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="962.87" y="159.5" >str..</text>
</g>
<g >
<title>runtime.(*mspan).writeHeapBitsSmall (2 samples, 0.38%)</title><rect x="1068.2" y="165" width="4.5" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1071.16" y="175.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.19%)</title><rect x="1023.0" y="133" width="2.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1026.04" y="143.5" ></text>
</g>
<g >
<title>runtime.runqgrab (12 samples, 2.29%)</title><rect x="1153.9" y="165" width="27.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1156.90" y="175.5" >r..</text>
</g>
<g >
<title>runtime.(*mspan).initHeapBits (1 samples, 0.19%)</title><rect x="1023.0" y="53" width="2.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1026.04" y="63.5" ></text>
</g>
<g >
<title>log/slog/internal/buffer.New (4 samples, 0.76%)</title><rect x="856.1" y="181" width="9.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="859.08" y="191.5" ></text>
</g>
<g >
<title>runtime.convT64 (1 samples, 0.19%)</title><rect x="1056.9" y="213" width="2.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1059.88" y="223.5" ></text>
</g>
<g >
<title>syscall.Syscall (12 samples, 2.29%)</title><rect x="10.0" y="133" width="27.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="13.00" y="143.5" >s..</text>
</g>
<g >
<title>runtime.funcspdelta (1 samples, 0.19%)</title><rect x="889.9" y="133" width="2.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="892.92" y="143.5" ></text>
</g>
<g >
<title>sync.(*Pool).Put (2 samples, 0.38%)</title><rect x="1018.5" y="181" width="4.5" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1021.53" y="191.5" ></text>
</g>
<g >
<title>runtime.sweepone (1 samples, 0.19%)</title><rect x="1104.3" y="245" width="2.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1107.26" y="255.5" ></text>
</g>
<g >
<title>sync.runtime_doSpin (115 samples, 21.99%)</title><rect x="580.8" y="133" width="259.5" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="583.82" y="143.5" >sync.runtime_doSpin</text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (1 samples, 0.19%)</title><rect x="1029.8" y="133" width="2.3" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1032.81" y="143.5" ></text>
</g>
<g >
<title>aeshashbody (2 samples, 0.38%)</title><rect x="1081.7" y="197" width="4.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1084.70" y="207.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.57%)</title><rect x="1025.3" y="181" width="6.8" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1028.30" y="191.5" ></text>
</g>
<g >
<title>runtime.casgstatus (2 samples, 0.38%)</title><rect x="129.6" y="53" width="4.5" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="132.58" y="63.5" ></text>
</g>
<g >
<title>runtime.mcall (33 samples, 6.31%)</title><rect x="1113.3" y="261" width="74.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1116.29" y="271.5" >runtime...</text>
</g>
<g >
<title>fmt.(*buffer).write (3 samples, 0.57%)</title><rect x="1002.7" y="133" width="6.8" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1005.73" y="143.5" ></text>
</g>
<g >
<title>time.absClock (1 samples, 0.19%)</title><rect x="89.0" y="133" width="2.2" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="91.97" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (20 samples, 3.82%)</title><rect x="885.4" y="181" width="45.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="888.41" y="191.5" >runt..</text>
</g>
<g >
<title>main.(*ChunkReader).startReader (471 samples, 90.06%)</title><rect x="37.1" y="261" width="1062.7" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="40.07" y="271.5" >main.(*ChunkReader).startReader</text>
</g>
<g >
<title>fmt.(*fmt).fmtFloat (1 samples, 0.19%)</title><rect x="957.6" y="149" width="2.3" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="960.61" y="159.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.19%)</title><rect x="1023.0" y="149" width="2.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1026.04" y="159.5" ></text>
</g>
<g >
<title>runtime.read (1 samples, 0.19%)</title><rect x="1140.4" y="181" width="2.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1143.36" y="191.5" ></text>
</g>
<g >
<title>fmt.(*buffer).writeString (3 samples, 0.57%)</title><rect x="37.1" y="165" width="6.7" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="40.07" y="175.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge.func1 (2 samples, 0.38%)</title><rect x="1099.8" y="181" width="4.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1102.75" y="191.5" ></text>
</g>
<g >
<title>runtime.callers.func1 (20 samples, 3.82%)</title><rect x="885.4" y="165" width="45.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="888.41" y="175.5" >runt..</text>
</g>
<g >
<title>syscall.Syscall (179 samples, 34.23%)</title><rect x="125.1" y="101" width="403.8" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="128.07" y="111.5" >syscall.Syscall</text>
</g>
<g >
<title>runtime.memmove (5 samples, 0.96%)</title><rect x="1032.1" y="181" width="11.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1035.07" y="191.5" ></text>
</g>
<g >
<title>os.(*File).write (12 samples, 2.29%)</title><rect x="10.0" y="181" width="27.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >o..</text>
</g>
<g >
<title>runtime.gcMarkDone (1 samples, 0.19%)</title><rect x="1106.5" y="245" width="2.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1109.52" y="255.5" ></text>
</g>
<g >
<title>runtime.(*inlineUnwinder).next (1 samples, 0.19%)</title><rect x="905.7" y="133" width="2.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="908.72" y="143.5" ></text>
</g>
<g >
<title>strconv.parseFloatPrefix (3 samples, 0.57%)</title><rect x="1093.0" y="197" width="6.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1095.98" y="207.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.19%)</title><rect x="1014.0" y="117" width="2.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1017.02" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (1 samples, 0.19%)</title><rect x="1104.3" y="181" width="2.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1107.26" y="191.5" ></text>
</g>
<g >
<title>sync.(*Pool).pin (1 samples, 0.19%)</title><rect x="871.9" y="165" width="2.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="874.87" y="175.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.19%)</title><rect x="1056.9" y="197" width="2.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1059.88" y="207.5" ></text>
</g>
<g >
<title>log.itoa (4 samples, 0.76%)</title><rect x="95.7" y="149" width="9.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="98.74" y="159.5" ></text>
</g>
<g >
<title>sync.(*Pool).Get (4 samples, 0.76%)</title><rect x="856.1" y="165" width="9.0" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="859.08" y="175.5" ></text>
</g>
<g >
<title>runtime.tracebackPCs (16 samples, 3.06%)</title><rect x="894.4" y="149" width="36.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="897.44" y="159.5" >run..</text>
</g>
<g >
<title>runtime.bgsweep (1 samples, 0.19%)</title><rect x="1104.3" y="261" width="2.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1107.26" y="271.5" ></text>
</g>
<g >
<title>log/slog.Debug (12 samples, 2.29%)</title><rect x="10.0" y="261" width="27.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >l..</text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func3 (1 samples, 0.19%)</title><rect x="1104.3" y="197" width="2.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1107.26" y="207.5" ></text>
</g>
<g >
<title>log/slog/internal/buffer.New (2 samples, 0.38%)</title><rect x="869.6" y="197" width="4.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="872.62" y="207.5" ></text>
</g>
<g >
<title>internal/poll.(*fdMutex).rwunlock (2 samples, 0.38%)</title><rect x="109.3" y="101" width="4.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="112.27" y="111.5" ></text>
</g>
<g >
<title>time.Now (2 samples, 0.38%)</title><rect x="540.2" y="149" width="4.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="543.21" y="159.5" ></text>
</g>
<g >
<title>syscall.RawSyscall6 (12 samples, 2.29%)</title><rect x="10.0" y="117" width="27.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="13.00" y="127.5" >s..</text>
</g>
<g >
<title>runtime.(*unwinder).next (6 samples, 1.15%)</title><rect x="910.2" y="133" width="13.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="913.23" y="143.5" ></text>
</g>
<g >
<title>runtime.bgscavenge (2 samples, 0.38%)</title><rect x="1099.8" y="261" width="4.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1102.75" y="271.5" ></text>
</g>
<g >
<title>sync/atomic.(*Uint64).CompareAndSwap (2 samples, 0.38%)</title><rect x="860.6" y="133" width="4.5" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="863.59" y="143.5" ></text>
</g>
<g >
<title>sync.(*Pool).Get (2 samples, 0.38%)</title><rect x="869.6" y="181" width="4.5" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="872.62" y="191.5" ></text>
</g>
<g >
<title>runtime.newInlineUnwinder (3 samples, 0.57%)</title><rect x="923.8" y="133" width="6.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="926.77" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.19%)</title><rect x="1023.0" y="101" width="2.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1026.04" y="111.5" ></text>
</g>
<g >
<title>strconv.atof64 (3 samples, 0.57%)</title><rect x="1093.0" y="181" width="6.8" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1095.98" y="191.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge (2 samples, 0.38%)</title><rect x="1099.8" y="213" width="4.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1102.75" y="223.5" ></text>
</g>
<g >
<title>runtime.cansemacquire (1 samples, 0.19%)</title><rect x="578.6" y="117" width="2.2" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="581.57" y="127.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).push (1 samples, 0.19%)</title><rect x="1029.8" y="117" width="2.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1032.81" y="127.5" ></text>
</g>
<g >
<title>time.Now (2 samples, 0.38%)</title><rect x="878.6" y="197" width="4.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="881.64" y="207.5" ></text>
</g>
<g >
<title>time.(*Time).unixSec (1 samples, 0.19%)</title><rect x="544.7" y="117" width="2.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="547.72" y="127.5" ></text>
</g>
<g >
<title>runtime.futex (8 samples, 1.53%)</title><rect x="1122.3" y="149" width="18.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1125.31" y="159.5" ></text>
</g>
<g >
<title>sync.(*Pool).Get (3 samples, 0.57%)</title><rect x="558.3" y="149" width="6.7" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="561.26" y="159.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint8).Load (2 samples, 0.38%)</title><rect x="125.1" y="69" width="4.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="128.07" y="79.5" ></text>
</g>
<g >
<title>log.formatHeader (5 samples, 0.96%)</title><rect x="79.9" y="149" width="11.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="82.94" y="159.5" ></text>
</g>
<g >
<title>time.now (1 samples, 0.19%)</title><rect x="1187.7" y="261" width="2.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1190.74" y="271.5" ></text>
</g>
<g >
<title>runtime.memmove (2 samples, 0.38%)</title><rect x="100.2" y="133" width="4.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="103.25" y="143.5" ></text>
</g>
<g >
<title>syscall.write (12 samples, 2.29%)</title><rect x="10.0" y="149" width="27.1" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="13.00" y="159.5" >s..</text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.19%)</title><rect x="1023.0" y="117" width="2.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1026.04" y="127.5" ></text>
</g>
<g >
<title>time.(*Location).get (1 samples, 0.19%)</title><rect x="86.7" y="101" width="2.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="89.71" y="111.5" ></text>
</g>
<g >
<title>runtime.pcvalue (1 samples, 0.19%)</title><rect x="889.9" y="117" width="2.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="892.92" y="127.5" ></text>
</g>
<g >
<title>time.Time.date (6 samples, 1.15%)</title><rect x="544.7" y="133" width="13.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="547.72" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.19%)</title><rect x="1104.3" y="213" width="2.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1107.26" y="223.5" ></text>
</g>
<g >
<title>fmt.(*buffer).writeString (3 samples, 0.57%)</title><rect x="941.8" y="197" width="6.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="944.82" y="207.5" ></text>
</g>
<g >
<title>log/slog.(*defaultHandler).Handle (12 samples, 2.29%)</title><rect x="10.0" y="229" width="27.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >l..</text>
</g>
<g >
<title>sync.(*Pool).Get (1 samples, 0.19%)</title><rect x="1023.0" y="181" width="2.3" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="1026.04" y="191.5" ></text>
</g>
<g >
<title>fmt.(*pp).doPrintf (3 samples, 0.57%)</title><rect x="37.1" y="229" width="6.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="40.07" y="239.5" ></text>
</g>
<g >
<title>strconv.ParseFloat (3 samples, 0.57%)</title><rect x="1093.0" y="213" width="6.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1095.98" y="223.5" ></text>
</g>
<g >
<title>sync.(*Pool).Put (3 samples, 0.57%)</title><rect x="849.3" y="165" width="6.8" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="852.31" y="175.5" ></text>
</g>
<g >
<title>runtime.(*unwinder).initAt (2 samples, 0.38%)</title><rect x="887.7" y="149" width="4.5" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="890.67" y="159.5" ></text>
</g>
<g >
<title>sync.(*Pool).Put (1 samples, 0.19%)</title><rect x="104.8" y="133" width="2.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="107.76" y="143.5" ></text>
</g>
<g >
<title>strconv.ryuFtoaShortest (13 samples, 2.49%)</title><rect x="966.6" y="117" width="29.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="969.63" y="127.5" >st..</text>
</g>
<g >
<title>runtime.sysUnusedOS (2 samples, 0.38%)</title><rect x="1099.8" y="149" width="4.5" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1102.75" y="159.5" ></text>
</g>
<g >
<title>log.init.0.func1.1 (2 samples, 0.38%)</title><rect x="91.2" y="149" width="4.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="94.22" y="159.5" ></text>
</g>
<g >
<title>internal/runtime/syscall.Syscall6 (12 samples, 2.29%)</title><rect x="10.0" y="101" width="27.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="111.5" >i..</text>
</g>
<g >
<title>log/slog.(*handleState).appendNonBuiltIns (2 samples, 0.38%)</title><rect x="844.8" y="181" width="4.5" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="847.80" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.38%)</title><rect x="1099.8" y="197" width="4.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1102.75" y="207.5" ></text>
</g>
<g >
<title>runtime.(*scavengerState).init.func2 (2 samples, 0.38%)</title><rect x="1099.8" y="229" width="4.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1102.75" y="239.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (2 samples, 0.38%)</title><rect x="1108.8" y="229" width="4.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1111.78" y="239.5" ></text>
</g>
<g >
<title>runtime.Callers (20 samples, 3.82%)</title><rect x="885.4" y="213" width="45.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="888.41" y="223.5" >runt..</text>
</g>
<g >
<title>runtime.(*timers).wakeTime (2 samples, 0.38%)</title><rect x="1149.4" y="181" width="4.5" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1152.39" y="191.5" ></text>
</g>
<g >
<title>fmt.(*fmt).pad (1 samples, 0.19%)</title><rect x="1009.5" y="133" width="2.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1012.50" y="143.5" ></text>
</g>
<g >
<title>sync.(*Mutex).lockSlow (123 samples, 23.52%)</title><rect x="565.0" y="149" width="277.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="568.03" y="159.5" >sync.(*Mutex).lockSlow</text>
</g>
<g >
<title>fmt.(*pp).fmtInteger (7 samples, 1.34%)</title><rect x="996.0" y="165" width="15.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="998.97" y="175.5" ></text>
</g>
<g >
<title>strconv.formatDigits (2 samples, 0.38%)</title><rect x="962.1" y="117" width="4.5" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="965.12" y="127.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (3 samples, 0.57%)</title><rect x="1106.5" y="261" width="6.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1109.52" y="271.5" ></text>
</g>
<g >
<title>time.absDate (3 samples, 0.57%)</title><rect x="551.5" y="117" width="6.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="554.49" y="127.5" ></text>
</g>
<g >
<title>strconv.special (1 samples, 0.19%)</title><rect x="1097.5" y="165" width="2.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1100.50" y="175.5" ></text>
</g>
<g >
<title>fmt.init.func1 (1 samples, 0.19%)</title><rect x="1023.0" y="165" width="2.3" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="1026.04" y="175.5" ></text>
</g>
<g >
<title>internal/poll.(*fdMutex).rwlock (4 samples, 0.76%)</title><rect x="116.0" y="117" width="9.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="119.04" y="127.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).free (1 samples, 0.19%)</title><rect x="1104.3" y="165" width="2.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1107.26" y="175.5" ></text>
</g>
<g >
<title>runtime.(*unwinder).resolveInternal (4 samples, 0.76%)</title><rect x="912.5" y="117" width="9.0" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="915.49" y="127.5" ></text>
</g>
<g >
<title>runtime.casgstatus (2 samples, 0.38%)</title><rect x="136.3" y="69" width="4.6" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="139.35" y="79.5" ></text>
</g>
<g >
<title>log/slog.(*defaultHandler).Handle (357 samples, 68.26%)</title><rect x="59.6" y="197" width="805.5" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="62.64" y="207.5" >log/slog.(*defaultHandler).Handle</text>
</g>
<g >
<title>time.Time.abs (1 samples, 0.19%)</title><rect x="86.7" y="117" width="2.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="89.71" y="127.5" ></text>
</g>
<g >
<title>main.(*ChunkReader).processRecord (75 samples, 14.34%)</title><rect x="930.5" y="229" width="169.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="933.54" y="239.5" >main.(*ChunkReader).p..</text>
</g>
<g >
<title>runtime.stealWork (17 samples, 3.25%)</title><rect x="1142.6" y="197" width="38.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1145.62" y="207.5" >run..</text>
</g>
<g >
<title>runtime.findRunnable (29 samples, 5.54%)</title><rect x="1115.5" y="213" width="65.5" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1118.54" y="223.5" >runtime..</text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.19%)</title><rect x="1023.0" y="69" width="2.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1026.04" y="79.5" ></text>
</g>
<g >
<title>log/slog.(*commonHandler).newHandleState (1 samples, 0.19%)</title><rect x="842.5" y="181" width="2.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="845.54" y="191.5" ></text>
</g>
<g >
<title>fmt.(*pp).free (3 samples, 0.57%)</title><rect x="1016.3" y="197" width="6.7" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1019.27" y="207.5" ></text>
</g>
<g >
<title>sync.indexLocal (1 samples, 0.19%)</title><rect x="104.8" y="117" width="2.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="107.76" y="127.5" ></text>
</g>
<g >
<title>log/slog.Debug (390 samples, 74.57%)</title><rect x="50.6" y="229" width="879.9" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="53.61" y="239.5" >log/slog.Debug</text>
</g>
<g >
<title>log.(*Logger).output (219 samples, 41.87%)</title><rect x="64.1" y="165" width="494.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="67.15" y="175.5" >log.(*Logger).output</text>
</g>
<g >
<title>runtime.findfunc (1 samples, 0.19%)</title><rect x="921.5" y="117" width="2.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="924.51" y="127.5" ></text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (1 samples, 0.19%)</title><rect x="1106.5" y="197" width="2.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1109.52" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.19%)</title><rect x="1029.8" y="149" width="2.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1032.81" y="159.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).writeUnlock (2 samples, 0.38%)</title><rect x="109.3" y="117" width="4.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="112.27" y="127.5" ></text>
</g>
<g >
<title>runtime.(*gcBits).bitp (1 samples, 0.19%)</title><rect x="1108.8" y="181" width="2.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1111.78" y="191.5" ></text>
</g>
<g >
<title>runtime.runqsteal (12 samples, 2.29%)</title><rect x="1153.9" y="181" width="27.1" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1156.90" y="191.5" >r..</text>
</g>
<g >
<title>fmt.(*pp).fmtString (3 samples, 0.57%)</title><rect x="37.1" y="197" width="6.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="40.07" y="207.5" ></text>
</g>
<g >
<title>runtime.sysUnused (2 samples, 0.38%)</title><rect x="1099.8" y="165" width="4.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1102.75" y="175.5" ></text>
</g>
<g >
<title>sync.(*Pool).pin (1 samples, 0.19%)</title><rect x="856.1" y="149" width="2.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="859.08" y="159.5" ></text>
</g>
<g >
<title>runtime.futex (3 samples, 0.57%)</title><rect x="1181.0" y="133" width="6.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1183.98" y="143.5" ></text>
</g>
<g >
<title>runtime.notewakeup (3 samples, 0.57%)</title><rect x="1181.0" y="165" width="6.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1183.98" y="175.5" ></text>
</g>
<g >
<title>os.(*File).write (187 samples, 35.76%)</title><rect x="107.0" y="149" width="421.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="110.02" y="159.5" >os.(*File).write</text>
</g>
<g >
<title>runtime.heapSetType (2 samples, 0.38%)</title><rect x="1068.2" y="181" width="4.5" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1071.16" y="191.5" ></text>
</g>
<g >
<title>log/slog.(*Logger).Handler (1 samples, 0.19%)</title><rect x="52.9" y="213" width="2.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="55.87" y="223.5" ></text>
</g>
<g >
<title>runtime.memmove (3 samples, 0.57%)</title><rect x="37.1" y="149" width="6.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="40.07" y="159.5" ></text>
</g>
<g >
<title>strconv.genericFtoa (16 samples, 3.06%)</title><rect x="959.9" y="133" width="36.1" height="15.0" fill="rgb(228,105,25)" rx="2" ry="2" />
<text  x="962.87" y="143.5" >str..</text>
</g>
<g >
<title>runtime.exitsyscallfast (2 samples, 0.38%)</title><rect x="140.9" y="69" width="4.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="143.86" y="79.5" ></text>
</g>
<g >
<title>sync.(*poolChain).popHead (3 samples, 0.57%)</title><rect x="858.3" y="149" width="6.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="861.34" y="159.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Int32).Add (1 samples, 0.19%)</title><rect x="1113.3" y="213" width="2.2" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1116.29" y="223.5" ></text>
</g>
<g >
<title>runtime.mPark (8 samples, 1.53%)</title><rect x="1122.3" y="197" width="18.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1125.31" y="207.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (1 samples, 0.19%)</title><rect x="1104.3" y="149" width="2.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1107.26" y="159.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Lock (123 samples, 23.52%)</title><rect x="565.0" y="165" width="277.5" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="568.03" y="175.5" >sync.(*Mutex).Lock</text>
</g>
<g >
<title>fmt.(*pp).printArg (28 samples, 5.35%)</title><rect x="953.1" y="181" width="63.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="956.10" y="191.5" >fmt.(*..</text>
</g>
<g >
<title>fmt.Sprintf (46 samples, 8.80%)</title><rect x="941.8" y="213" width="103.8" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="944.82" y="223.5" >fmt.Sprintf</text>
</g>
<g >
<title>syscall.Write (179 samples, 34.23%)</title><rect x="125.1" y="133" width="403.8" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="128.07" y="143.5" >syscall.Write</text>
</g>
<g >
<title>runtime.slicebytetostring (3 samples, 0.57%)</title><rect x="1086.2" y="213" width="6.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1089.21" y="223.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (9 samples, 1.72%)</title><rect x="1025.3" y="197" width="20.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1028.30" y="207.5" ></text>
</g>
<g >
<title>log.(*Logger).output (12 samples, 2.29%)</title><rect x="10.0" y="197" width="27.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >l..</text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.19%)</title><rect x="1043.3" y="181" width="2.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1046.35" y="191.5" ></text>
</g>
<g >
<title>runtime.preemptall (1 samples, 0.19%)</title><rect x="1106.5" y="181" width="2.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1109.52" y="191.5" ></text>
</g>
<g >
<title>log/slog.(*Logger).log (12 samples, 2.29%)</title><rect x="10.0" y="245" width="27.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >l..</text>
</g>
<g >
<title>runtime.convTstring (7 samples, 1.34%)</title><rect x="1059.1" y="213" width="15.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1062.14" y="223.5" ></text>
</g>
<g >
<title>fmt.newPrinter (1 samples, 0.19%)</title><rect x="1023.0" y="197" width="2.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1026.04" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (1 samples, 0.19%)</title><rect x="1111.0" y="181" width="2.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1114.03" y="191.5" ></text>
</g>
<g >
<title>log.putBuffer (1 samples, 0.19%)</title><rect x="104.8" y="149" width="2.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="107.76" y="159.5" ></text>
</g>
<g >
<title>strconv.readFloat (1 samples, 0.19%)</title><rect x="1095.2" y="165" width="2.3" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1098.24" y="175.5" ></text>
</g>
<g >
<title>math.Max (3 samples, 0.57%)</title><rect x="1050.1" y="213" width="6.8" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1053.11" y="223.5" ></text>
</g>
<g >
<title>runtime.runqempty (1 samples, 0.19%)</title><rect x="576.3" y="133" width="2.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="579.31" y="143.5" ></text>
</g>
<g >
<title>fmt.(*fmt).fmtS (3 samples, 0.57%)</title><rect x="37.1" y="181" width="6.7" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="40.07" y="191.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.19%)</title><rect x="1072.7" y="197" width="2.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1075.68" y="207.5" ></text>
</g>
<g >
<title>runtime.callers (20 samples, 3.82%)</title><rect x="885.4" y="197" width="45.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="888.41" y="207.5" >runt..</text>
</g>
<g >
<title>log/slog.NewRecord (1 samples, 0.19%)</title><rect x="883.2" y="213" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="886.15" y="223.5" ></text>
</g>
<g >
<title>all (523 samples, 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>runtime.netpoll (1 samples, 0.19%)</title><rect x="1140.4" y="197" width="2.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1143.36" y="207.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (3 samples, 0.57%)</title><rect x="107.0" y="133" width="6.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="110.02" y="143.5" ></text>
</g>
<g >
<title>sync.(*poolChain).pushHead (3 samples, 0.57%)</title><rect x="849.3" y="149" width="6.8" height="15.0" fill="rgb(240,163,38)" rx="2" ry="2" />
<text  x="852.31" y="159.5" ></text>
</g>
<g >
<title>runtime.startm (3 samples, 0.57%)</title><rect x="1181.0" y="181" width="6.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1183.98" y="191.5" ></text>
</g>
<g >
<title>runtime.duffcopy (2 samples, 0.38%)</title><rect x="874.1" y="197" width="4.5" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="877.13" y="207.5" ></text>
</g>
<g >
<title>internal/runtime/syscall.Syscall6 (170 samples, 32.50%)</title><rect x="145.4" y="69" width="383.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="148.37" y="79.5" >internal/runtime/syscall.Syscall6</text>
</g>
<g >
<title>runtime.futexwakeup (3 samples, 0.57%)</title><rect x="1181.0" y="149" width="6.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1183.98" y="159.5" ></text>
</g>
<g >
<title>sync.runtime_nanotime (1 samples, 0.19%)</title><rect x="840.3" y="133" width="2.2" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="843.29" y="143.5" ></text>
</g>
<g >
<title>runtime.(*unwinder).cgoCallers (1 samples, 0.19%)</title><rect x="908.0" y="133" width="2.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="910.97" y="143.5" ></text>
</g>
<g >
<title>runtime.procPin (1 samples, 0.19%)</title><rect x="1020.8" y="149" width="2.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1023.78" y="159.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Unlock (5 samples, 0.96%)</title><rect x="528.9" y="149" width="11.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="531.93" y="159.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func2 (1 samples, 0.19%)</title><rect x="1106.5" y="213" width="2.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1109.52" y="223.5" ></text>
</g>
<g >
<title>runtime.madvise (2 samples, 0.38%)</title><rect x="1099.8" y="133" width="4.5" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1102.75" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.38%)</title><rect x="1108.8" y="245" width="4.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1111.78" y="255.5" ></text>
</g>
<g >
<title>log.init.0.func1 (346 samples, 66.16%)</title><rect x="61.9" y="181" width="780.6" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="64.89" y="191.5" >log.init.0.func1</text>
</g>
<g >
<title>strconv.fmtF (2 samples, 0.38%)</title><rect x="962.1" y="101" width="4.5" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="965.12" y="111.5" ></text>
</g>
<g >
<title>runtime.(*scavengerState).run (2 samples, 0.38%)</title><rect x="1099.8" y="245" width="4.5" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1102.75" y="255.5" ></text>
</g>
<g >
<title>strconv.ryuDigits32 (9 samples, 1.72%)</title><rect x="975.7" y="85" width="20.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="978.66" y="95.5" ></text>
</g>
<g >
<title>log/slog.(*Logger).log (367 samples, 70.17%)</title><rect x="55.1" y="213" width="828.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="58.12" y="223.5" >log/slog.(*Logger).log</text>
</g>
<g >
<title>runtime.park_m (33 samples, 6.31%)</title><rect x="1113.3" y="245" width="74.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1116.29" y="255.5" >runtime...</text>
</g>
<g >
<title>fmt.(*buffer).writeString (2 samples, 0.38%)</title><rect x="1011.8" y="133" width="4.5" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1014.76" y="143.5" ></text>
</g>
<g >
<title>sync.(*poolDequeue).pushHead (3 samples, 0.57%)</title><rect x="849.3" y="133" width="6.8" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="852.31" y="143.5" ></text>
</g>
<g >
<title>fmt.(*pp).printArg (3 samples, 0.57%)</title><rect x="37.1" y="213" width="6.7" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="40.07" y="223.5" ></text>
</g>
<g >
<title>runtime.gcDrain (2 samples, 0.38%)</title><rect x="1108.8" y="213" width="4.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1111.78" y="223.5" ></text>
</g>
<g >
<title>runtime.preemptone (1 samples, 0.19%)</title><rect x="1106.5" y="165" width="2.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1109.52" y="175.5" ></text>
</g>
<g >
<title>strconv.atof64exact (1 samples, 0.19%)</title><rect x="1093.0" y="165" width="2.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1095.98" y="175.5" ></text>
</g>
</g>
</svg>
