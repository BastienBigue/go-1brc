<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>runtime.(*mcache).nextFree (2 samples, 0.25%)</title><rect x="697.5" y="165" width="2.9" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="700.47" y="175.5" ></text>
</g>
<g >
<title>syscall.pread (3 samples, 0.38%)</title><rect x="1155.8" y="213" width="4.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1158.78" y="223.5" ></text>
</g>
<g >
<title>os.(*File).pread (3 samples, 0.38%)</title><rect x="1155.8" y="245" width="4.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1158.78" y="255.5" ></text>
</g>
<g >
<title>runtime.releasem (1 samples, 0.13%)</title><rect x="1059.1" y="197" width="1.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1062.05" y="207.5" ></text>
</g>
<g >
<title>runtime.add (3 samples, 0.38%)</title><rect x="761.5" y="213" width="4.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="764.45" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.13%)</title><rect x="809.1" y="165" width="1.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="812.07" y="175.5" ></text>
</g>
<g >
<title>fmt.(*fmt).fmtS (4 samples, 0.50%)</title><rect x="10.0" y="181" width="6.0" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>runtime.memmove (3 samples, 0.38%)</title><rect x="594.8" y="117" width="4.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="597.79" y="127.5" ></text>
</g>
<g >
<title>runtime.acquirem (3 samples, 0.38%)</title><rect x="774.8" y="197" width="4.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="777.84" y="207.5" ></text>
</g>
<g >
<title>strconv.atof64exact (16 samples, 2.02%)</title><rect x="1071.0" y="165" width="23.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1073.96" y="175.5" >s..</text>
</g>
<g >
<title>fmt.(*pp).doPrintf (4 samples, 0.50%)</title><rect x="10.0" y="229" width="6.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>runtime.acquirem (2 samples, 0.25%)</title><rect x="1005.5" y="197" width="3.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1008.49" y="207.5" ></text>
</g>
<g >
<title>runtime.findRunnable (1 samples, 0.13%)</title><rect x="1188.5" y="213" width="1.5" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1191.51" y="223.5" ></text>
</g>
<g >
<title>strconv.atof64 (60 samples, 7.57%)</title><rect x="1066.5" y="181" width="89.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1069.49" y="191.5" >strconv.at..</text>
</g>
<g >
<title>strconv.ParseFloat (64 samples, 8.07%)</title><rect x="1060.5" y="213" width="95.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1063.54" y="223.5" >strconv.Par..</text>
</g>
<g >
<title>fmt.(*buffer).write (2 samples, 0.25%)</title><rect x="576.9" y="133" width="3.0" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="579.94" y="143.5" ></text>
</g>
<g >
<title>log/slog.(*defaultHandler).Enabled (1 samples, 0.13%)</title><rect x="69.5" y="181" width="1.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="72.52" y="191.5" ></text>
</g>
<g >
<title>math.Min (5 samples, 0.63%)</title><rect x="754.0" y="213" width="7.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="757.01" y="223.5" ></text>
</g>
<g >
<title>fmt.(*pp).printArg (4 samples, 0.50%)</title><rect x="10.0" y="213" width="6.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (3 samples, 0.38%)</title><rect x="893.9" y="181" width="4.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="896.88" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.13%)</title><rect x="809.1" y="85" width="1.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="812.07" y="95.5" ></text>
</g>
<g >
<title>runtime.releasem (3 samples, 0.38%)</title><rect x="728.7" y="181" width="4.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="731.71" y="191.5" ></text>
</g>
<g >
<title>runtime.strhash (1 samples, 0.13%)</title><rect x="986.1" y="197" width="1.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="989.14" y="207.5" ></text>
</g>
<g >
<title>fmt.(*buffer).writeString (34 samples, 4.29%)</title><rect x="94.8" y="197" width="50.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="97.82" y="207.5" >fmt.(..</text>
</g>
<g >
<title>math.archMin (4 samples, 0.50%)</title><rect x="755.5" y="197" width="6.0" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="758.50" y="207.5" ></text>
</g>
<g >
<title>runtime.mallocgc (23 samples, 2.90%)</title><rect x="780.8" y="197" width="34.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="783.79" y="207.5" >ru..</text>
</g>
<g >
<title>runtime.(*mspan).base (1 samples, 0.13%)</title><rect x="1185.5" y="181" width="1.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1188.54" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.13%)</title><rect x="1032.3" y="165" width="1.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1035.27" y="175.5" ></text>
</g>
<g >
<title>all (793 samples, 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>runtime.procPin (1 samples, 0.13%)</title><rect x="624.6" y="149" width="1.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="627.55" y="159.5" ></text>
</g>
<g >
<title>strconv.ryuFtoaShortest (112 samples, 14.12%)</title><rect x="377.5" y="117" width="166.7" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="380.54" y="127.5" >strconv.ryuFtoaShortest</text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (2 samples, 0.25%)</title><rect x="697.5" y="69" width="2.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="700.47" y="79.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointersChunked (3 samples, 0.38%)</title><rect x="1160.2" y="213" width="4.5" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1163.24" y="223.5" ></text>
</g>
<g >
<title>runtime.findRunnable (1 samples, 0.13%)</title><rect x="1187.0" y="197" width="1.5" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1190.02" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (2 samples, 0.25%)</title><rect x="697.5" y="133" width="2.9" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="700.47" y="143.5" ></text>
</g>
<g >
<title>runtime.finishsweep_m (1 samples, 0.13%)</title><rect x="700.4" y="117" width="1.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="703.44" y="127.5" ></text>
</g>
<g >
<title>runtime.makeSpanClass (1 samples, 0.13%)</title><rect x="826.9" y="197" width="1.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="829.92" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (1 samples, 0.13%)</title><rect x="809.1" y="69" width="1.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="812.07" y="79.5" ></text>
</g>
<g >
<title>strconv.ryuDigits (64 samples, 8.07%)</title><rect x="449.0" y="101" width="95.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="451.97" y="111.5" >strconv.ryu..</text>
</g>
<g >
<title>runtime.goschedguarded_m (1 samples, 0.13%)</title><rect x="1187.0" y="245" width="1.5" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="1190.02" y="255.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.38%)</title><rect x="1160.2" y="229" width="4.5" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1163.24" y="239.5" ></text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.13%)</title><rect x="1188.5" y="229" width="1.5" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1191.51" y="239.5" ></text>
</g>
<g >
<title>runtime.memmove (3 samples, 0.38%)</title><rect x="1164.7" y="229" width="4.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1167.70" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.13%)</title><rect x="1032.3" y="181" width="1.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1035.27" y="191.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (2 samples, 0.25%)</title><rect x="1179.6" y="229" width="3.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1182.58" y="239.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (1 samples, 0.13%)</title><rect x="1178.1" y="149" width="1.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1181.10" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (1 samples, 0.13%)</title><rect x="1032.3" y="69" width="1.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1035.27" y="79.5" ></text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.13%)</title><rect x="1187.0" y="213" width="1.5" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1190.02" y="223.5" ></text>
</g>
<g >
<title>memeqbody (7 samples, 0.88%)</title><rect x="975.7" y="197" width="10.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="978.73" y="207.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.13%)</title><rect x="809.1" y="101" width="1.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="812.07" y="111.5" ></text>
</g>
<g >
<title>runtime.releasem (1 samples, 0.13%)</title><rect x="910.3" y="197" width="1.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="913.25" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.13%)</title><rect x="864.1" y="117" width="1.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="867.12" y="127.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.13%)</title><rect x="1032.3" y="101" width="1.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1035.27" y="111.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.13%)</title><rect x="809.1" y="181" width="1.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="812.07" y="191.5" ></text>
</g>
<g >
<title>runtime.gcDrain (3 samples, 0.38%)</title><rect x="1182.6" y="213" width="4.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1185.56" y="223.5" ></text>
</g>
<g >
<title>fmt.(*buffer).writeString (4 samples, 0.50%)</title><rect x="10.0" y="165" width="6.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (3 samples, 0.38%)</title><rect x="861.1" y="165" width="4.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="864.15" y="175.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (48 samples, 6.05%)</title><rect x="661.8" y="197" width="71.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="664.75" y="207.5" >runtime...</text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge (3 samples, 0.38%)</title><rect x="1169.2" y="213" width="4.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1172.17" y="223.5" ></text>
</g>
<g >
<title>runtime.(*pageCache).alloc (1 samples, 0.13%)</title><rect x="699.0" y="37" width="1.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="701.95" y="47.5" ></text>
</g>
<g >
<title>runtime.(*fixalloc).alloc (1 samples, 0.13%)</title><rect x="809.1" y="37" width="1.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="812.07" y="47.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.13%)</title><rect x="864.1" y="101" width="1.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="867.12" y="111.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.13%)</title><rect x="1184.0" y="149" width="1.5" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1187.05" y="159.5" ></text>
</g>
<g >
<title>math.archMax (1 samples, 0.13%)</title><rect x="752.5" y="197" width="1.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="755.52" y="207.5" ></text>
</g>
<g >
<title>fmt.(*fmt).pad (4 samples, 0.50%)</title><rect x="579.9" y="133" width="6.0" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="582.91" y="143.5" ></text>
</g>
<g >
<title>fmt.(*fmt).fmtInteger (27 samples, 3.40%)</title><rect x="545.7" y="149" width="40.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="548.69" y="159.5" >fmt..</text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.38%)</title><rect x="1182.6" y="245" width="4.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1185.56" y="255.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.13%)</title><rect x="700.4" y="149" width="1.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="703.44" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (1 samples, 0.13%)</title><rect x="1033.8" y="181" width="1.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1036.76" y="191.5" ></text>
</g>
<g >
<title>fmt.(*pp).fmtFloat (183 samples, 23.08%)</title><rect x="271.9" y="165" width="272.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="274.89" y="175.5" >fmt.(*pp).fmtFloat</text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.13%)</title><rect x="864.1" y="85" width="1.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="867.12" y="95.5" ></text>
</g>
<g >
<title>runtime.memmove (16 samples, 2.02%)</title><rect x="121.6" y="181" width="23.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="124.60" y="191.5" >r..</text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.13%)</title><rect x="1032.3" y="133" width="1.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1035.27" y="143.5" ></text>
</g>
<g >
<title>runtime.mallocgc (22 samples, 2.77%)</title><rect x="669.2" y="181" width="32.7" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="672.19" y="191.5" >ru..</text>
</g>
<g >
<title>runtime.markroot.func1 (2 samples, 0.25%)</title><rect x="1182.6" y="181" width="2.9" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1185.56" y="191.5" ></text>
</g>
<g >
<title>main.(*MinMaxAverage).updateWith (11 samples, 1.39%)</title><rect x="733.2" y="213" width="16.3" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="736.18" y="223.5" ></text>
</g>
<g >
<title>strconv.ryuDigits32 (30 samples, 3.78%)</title><rect x="499.6" y="85" width="44.6" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="502.56" y="95.5" >strc..</text>
</g>
<g >
<title>fmt.(*pp).fmtInteger (28 samples, 3.53%)</title><rect x="544.2" y="165" width="41.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="547.20" y="175.5" >fmt..</text>
</g>
<g >
<title>math.Max (3 samples, 0.38%)</title><rect x="749.5" y="213" width="4.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="752.55" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).tryAllocMSpan (1 samples, 0.13%)</title><rect x="864.1" y="69" width="1.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="867.12" y="79.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).free (1 samples, 0.13%)</title><rect x="1178.1" y="165" width="1.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1181.10" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (1 samples, 0.13%)</title><rect x="1178.1" y="181" width="1.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1181.10" y="191.5" ></text>
</g>
<g >
<title>runtime.runqsteal (1 samples, 0.13%)</title><rect x="1188.5" y="181" width="1.5" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1191.51" y="191.5" ></text>
</g>
<g >
<title>syscall.Pread (3 samples, 0.38%)</title><rect x="1155.8" y="229" width="4.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1158.78" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (5 samples, 0.63%)</title><rect x="859.7" y="181" width="7.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="862.66" y="191.5" ></text>
</g>
<g >
<title>runtime.futex (1 samples, 0.13%)</title><rect x="1187.0" y="133" width="1.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1190.02" y="143.5" ></text>
</g>
<g >
<title>runtime.park_m (1 samples, 0.13%)</title><rect x="1188.5" y="245" width="1.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1191.51" y="255.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (1 samples, 0.13%)</title><rect x="602.2" y="181" width="1.5" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="605.23" y="191.5" ></text>
</g>
<g >
<title>log/slog.Debug (7 samples, 0.88%)</title><rect x="60.6" y="229" width="10.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="63.59" y="239.5" ></text>
</g>
<g >
<title>runtime.(*gcBitsArena).tryAlloc (1 samples, 0.13%)</title><rect x="1181.1" y="213" width="1.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1184.07" y="223.5" ></text>
</g>
<g >
<title>syscall.RawSyscall6 (3 samples, 0.38%)</title><rect x="1155.8" y="181" width="4.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1158.78" y="191.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (4 samples, 0.50%)</title><rect x="16.0" y="229" width="5.9" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="18.95" y="239.5" ></text>
</g>
<g >
<title>runtime.mapaccess2_faststr (51 samples, 6.43%)</title><rect x="911.7" y="213" width="75.9" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="914.74" y="223.5" >runtime...</text>
</g>
<g >
<title>runtime.goschedImpl (1 samples, 0.13%)</title><rect x="1187.0" y="229" width="1.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1190.02" y="239.5" ></text>
</g>
<g >
<title>runtime.bgscavenge (3 samples, 0.38%)</title><rect x="1169.2" y="261" width="4.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1172.17" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (2 samples, 0.25%)</title><rect x="697.5" y="117" width="2.9" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="700.47" y="127.5" ></text>
</g>
<g >
<title>strconv.formatDigits (14 samples, 1.77%)</title><rect x="356.7" y="117" width="20.8" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="359.71" y="127.5" ></text>
</g>
<g >
<title>sync.runtime_procUnpin (3 samples, 0.38%)</title><rect x="657.3" y="165" width="4.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="660.29" y="175.5" ></text>
</g>
<g >
<title>sync.(*Pool).Get (16 samples, 2.02%)</title><rect x="637.9" y="181" width="23.9" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="640.94" y="191.5" >s..</text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.13%)</title><rect x="1182.6" y="149" width="1.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1185.56" y="159.5" ></text>
</g>
<g >
<title>main.(*ChunkReader).processBuffer (762 samples, 96.09%)</title><rect x="21.9" y="245" width="1133.9" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="24.90" y="255.5" >main.(*ChunkReader).processBuffer</text>
</g>
<g >
<title>runtime.runqgrab (1 samples, 0.13%)</title><rect x="1188.5" y="165" width="1.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1191.51" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (2 samples, 0.25%)</title><rect x="697.5" y="101" width="2.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="700.47" y="111.5" ></text>
</g>
<g >
<title>main.(*ChunkReader).startReader (779 samples, 98.23%)</title><rect x="10.0" y="261" width="1159.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >main.(*ChunkReader).startReader</text>
</g>
<g >
<title>log/slog.(*Logger).Enabled (4 samples, 0.50%)</title><rect x="65.1" y="197" width="5.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="68.06" y="207.5" ></text>
</g>
<g >
<title>runtime.alignUp (1 samples, 0.13%)</title><rect x="1008.5" y="197" width="1.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1011.46" y="207.5" ></text>
</g>
<g >
<title>fmt.(*pp).doPrintf (307 samples, 38.71%)</title><rect x="146.9" y="197" width="456.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="149.90" y="207.5" >fmt.(*pp).doPrintf</text>
</g>
<g >
<title>fmt.(*pp).free (16 samples, 2.02%)</title><rect x="603.7" y="197" width="23.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="606.72" y="207.5" >f..</text>
</g>
<g >
<title>runtime.sysUnusedOS (3 samples, 0.38%)</title><rect x="1169.2" y="149" width="4.4" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1172.17" y="159.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (49 samples, 6.18%)</title><rect x="987.6" y="213" width="72.9" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="990.63" y="223.5" >runtime...</text>
</g>
<g >
<title>runtime.(*fixalloc).alloc (1 samples, 0.13%)</title><rect x="1032.3" y="37" width="1.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1035.27" y="47.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (7 samples, 0.88%)</title><rect x="1048.6" y="197" width="10.5" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1051.64" y="207.5" ></text>
</g>
<g >
<title>sync.(*Pool).pin (6 samples, 0.76%)</title><rect x="617.1" y="165" width="8.9" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="620.11" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.13%)</title><rect x="864.1" y="149" width="1.5" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="867.12" y="159.5" ></text>
</g>
<g >
<title>runtime.markroot (2 samples, 0.25%)</title><rect x="1182.6" y="197" width="2.9" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1185.56" y="207.5" ></text>
</g>
<g >
<title>runtime.gcStart (1 samples, 0.13%)</title><rect x="700.4" y="165" width="1.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="703.44" y="175.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (4 samples, 0.50%)</title><rect x="722.8" y="181" width="5.9" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="725.76" y="191.5" ></text>
</g>
<g >
<title>strconv.fmtF (9 samples, 1.13%)</title><rect x="364.1" y="101" width="13.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="367.15" y="111.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.13%)</title><rect x="376.1" y="85" width="1.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="379.05" y="95.5" ></text>
</g>
<g >
<title>fmt.(*fmt).fmtFloat (23 samples, 2.90%)</title><rect x="276.4" y="149" width="34.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="279.36" y="159.5" >fm..</text>
</g>
<g >
<title>runtime.sysUnused (3 samples, 0.38%)</title><rect x="1169.2" y="165" width="4.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1172.17" y="175.5" ></text>
</g>
<g >
<title>strconv.commonPrefixLenIgnoreCase (1 samples, 0.13%)</title><rect x="1094.8" y="165" width="1.5" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1097.77" y="175.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (3 samples, 0.38%)</title><rect x="1164.7" y="245" width="4.5" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1167.70" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (2 samples, 0.25%)</title><rect x="697.5" y="149" width="2.9" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="700.47" y="159.5" ></text>
</g>
<g >
<title>runtime.futexsleep (1 samples, 0.13%)</title><rect x="1187.0" y="149" width="1.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1190.02" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.13%)</title><rect x="809.1" y="117" width="1.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="812.07" y="127.5" ></text>
</g>
<g >
<title>runtime.deductAssistCredit (2 samples, 0.25%)</title><rect x="867.1" y="181" width="3.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="870.10" y="191.5" ></text>
</g>
<g >
<title>fmt.(*fmt).padString (2 samples, 0.25%)</title><rect x="599.3" y="133" width="2.9" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="602.26" y="143.5" ></text>
</g>
<g >
<title>fmt.(*fmt).pad (5 samples, 0.63%)</title><rect x="303.1" y="133" width="7.5" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="306.14" y="143.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (3 samples, 0.38%)</title><rect x="1182.6" y="229" width="4.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1185.56" y="239.5" ></text>
</g>
<g >
<title>strconv.genericFtoa (156 samples, 19.67%)</title><rect x="312.1" y="133" width="232.1" height="15.0" fill="rgb(228,105,25)" rx="2" ry="2" />
<text  x="315.07" y="143.5" >strconv.genericFtoa</text>
</g>
<g >
<title>runtime.(*mspan).writeHeapBitsSmall (13 samples, 1.64%)</title><rect x="874.5" y="165" width="19.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="877.54" y="175.5" ></text>
</g>
<g >
<title>sync.runtime_procUnpin (1 samples, 0.13%)</title><rect x="626.0" y="165" width="1.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="629.04" y="175.5" ></text>
</g>
<g >
<title>fmt.(*pp).fmtString (11 samples, 1.39%)</title><rect x="585.9" y="165" width="16.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="588.86" y="175.5" ></text>
</g>
<g >
<title>runtime.convT64 (33 samples, 4.16%)</title><rect x="767.4" y="213" width="49.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="770.40" y="223.5" >runt..</text>
</g>
<g >
<title>internal/runtime/syscall.Syscall6 (3 samples, 0.38%)</title><rect x="1155.8" y="165" width="4.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1158.78" y="175.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.13%)</title><rect x="1188.5" y="149" width="1.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1191.51" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.13%)</title><rect x="1032.3" y="149" width="1.5" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1035.27" y="159.5" ></text>
</g>
<g >
<title>main.(*ChunkReader).processRecord (729 samples, 91.93%)</title><rect x="71.0" y="229" width="1084.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="74.01" y="239.5" >main.(*ChunkReader).processRecord</text>
</g>
<g >
<title>fmt.Sprintf (433 samples, 54.60%)</title><rect x="88.9" y="213" width="644.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="91.87" y="223.5" >fmt.Sprintf</text>
</g>
<g >
<title>runtime.mallocgc (47 samples, 5.93%)</title><rect x="828.4" y="197" width="69.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="831.41" y="207.5" >runtime..</text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.13%)</title><rect x="1032.3" y="85" width="1.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1035.27" y="95.5" ></text>
</g>
<g >
<title>log/slog.(*Logger).log (7 samples, 0.88%)</title><rect x="60.6" y="213" width="10.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="63.59" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.25%)</title><rect x="1176.6" y="213" width="3.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1179.61" y="223.5" ></text>
</g>
<g >
<title>strconv.parseFloatPrefix (61 samples, 7.69%)</title><rect x="1065.0" y="197" width="90.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1068.01" y="207.5" >strconv.pa..</text>
</g>
<g >
<title>runtime.stealWork (1 samples, 0.13%)</title><rect x="1188.5" y="197" width="1.5" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1191.51" y="207.5" ></text>
</g>
<g >
<title>runtime.memmove (4 samples, 0.50%)</title><rect x="16.0" y="213" width="5.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="18.95" y="223.5" ></text>
</g>
<g >
<title>runtime.memmove (9 samples, 1.13%)</title><rect x="1035.2" y="197" width="13.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1038.25" y="207.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (8 samples, 1.01%)</title><rect x="898.3" y="197" width="12.0" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="901.35" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (2 samples, 0.25%)</title><rect x="1176.6" y="229" width="3.0" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1179.61" y="239.5" ></text>
</g>
<g >
<title>runtime.(*scavengerState).run (3 samples, 0.38%)</title><rect x="1169.2" y="245" width="4.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1172.17" y="255.5" ></text>
</g>
<g >
<title>runtime.bucketShift (1 samples, 0.13%)</title><rect x="765.9" y="213" width="1.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="768.91" y="223.5" ></text>
</g>
<g >
<title>runtime.makeslice (3 samples, 0.38%)</title><rect x="1160.2" y="245" width="4.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1163.24" y="255.5" ></text>
</g>
<g >
<title>strconv.AppendFloat (157 samples, 19.80%)</title><rect x="310.6" y="149" width="233.6" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="313.58" y="159.5" >strconv.AppendFloat</text>
</g>
<g >
<title>runtime.acquirem (5 samples, 0.63%)</title><rect x="819.5" y="197" width="7.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="822.48" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.13%)</title><rect x="864.1" y="133" width="1.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="867.12" y="143.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.13%)</title><rect x="1185.5" y="197" width="1.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1188.54" y="207.5" ></text>
</g>
<g >
<title>runtime.bgsweep (6 samples, 0.76%)</title><rect x="1173.6" y="261" width="9.0" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1176.63" y="271.5" ></text>
</g>
<g >
<title>runtime.(*scavengerState).init.func2 (3 samples, 0.38%)</title><rect x="1169.2" y="229" width="4.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1172.17" y="239.5" ></text>
</g>
<g >
<title>runtime.getMCache (1 samples, 0.13%)</title><rect x="1009.9" y="197" width="1.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1012.95" y="207.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).reset (1 samples, 0.13%)</title><rect x="700.4" y="101" width="1.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="703.44" y="111.5" ></text>
</g>
<g >
<title>runtime.releasem (1 samples, 0.13%)</title><rect x="815.0" y="197" width="1.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="818.02" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocMSpanLocked (1 samples, 0.13%)</title><rect x="809.1" y="53" width="1.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="812.07" y="63.5" ></text>
</g>
<g >
<title>runtime.mPark (1 samples, 0.13%)</title><rect x="1187.0" y="181" width="1.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1190.02" y="191.5" ></text>
</g>
<g >
<title>fmt.(*buffer).write (5 samples, 0.63%)</title><rect x="295.7" y="133" width="7.4" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="298.70" y="143.5" ></text>
</g>
<g >
<title>strconv.readFloat (35 samples, 4.41%)</title><rect x="1096.3" y="165" width="52.0" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1099.25" y="175.5" >strco..</text>
</g>
<g >
<title>runtime.deductAssistCredit (2 samples, 0.25%)</title><rect x="810.6" y="181" width="2.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="813.55" y="191.5" ></text>
</g>
<g >
<title>fmt.Sprintf (8 samples, 1.01%)</title><rect x="10.0" y="245" width="11.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>fmt.(*fmt).fmtS (10 samples, 1.26%)</title><rect x="587.4" y="149" width="14.8" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="590.35" y="159.5" ></text>
</g>
<g >
<title>strconv.divmod1e9 (5 samples, 0.63%)</title><rect x="414.7" y="101" width="7.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="417.74" y="111.5" ></text>
</g>
<g >
<title>runtime.convTstring (64 samples, 8.07%)</title><rect x="816.5" y="213" width="95.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="819.51" y="223.5" >runtime.con..</text>
</g>
<g >
<title>runtime.mcall (2 samples, 0.25%)</title><rect x="1187.0" y="261" width="3.0" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1190.02" y="271.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (3 samples, 0.38%)</title><rect x="1160.2" y="197" width="4.5" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1163.24" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.13%)</title><rect x="809.1" y="149" width="1.5" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="812.07" y="159.5" ></text>
</g>
<g >
<title>runtime.acquirem (1 samples, 0.13%)</title><rect x="667.7" y="181" width="1.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="670.70" y="191.5" ></text>
</g>
<g >
<title>runtime.(*pallocBits).summarize (1 samples, 0.13%)</title><rect x="1178.1" y="133" width="1.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1181.10" y="143.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge.func1 (3 samples, 0.38%)</title><rect x="1169.2" y="181" width="4.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1172.17" y="191.5" ></text>
</g>
<g >
<title>fmt.(*pp).fmtString (4 samples, 0.50%)</title><rect x="10.0" y="197" width="6.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>sync.(*Pool).Put (10 samples, 1.26%)</title><rect x="612.6" y="181" width="14.9" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="615.65" y="191.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (3 samples, 0.38%)</title><rect x="1182.6" y="261" width="4.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1185.56" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.13%)</title><rect x="809.1" y="133" width="1.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="812.07" y="143.5" ></text>
</g>
<g >
<title>runtime.heapSetType (16 samples, 2.02%)</title><rect x="870.1" y="181" width="23.8" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="873.08" y="191.5" >r..</text>
</g>
<g >
<title>runtime.publicationBarrier (1 samples, 0.13%)</title><rect x="813.5" y="181" width="1.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="816.53" y="191.5" ></text>
</g>
<g >
<title>fmt.(*pp).printArg (249 samples, 31.40%)</title><rect x="231.7" y="181" width="370.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="234.72" y="191.5" >fmt.(*pp).printArg</text>
</g>
<g >
<title>sync.(*Pool).pin (4 samples, 0.50%)</title><rect x="651.3" y="165" width="6.0" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="654.34" y="175.5" ></text>
</g>
<g >
<title>strconv.special (5 samples, 0.63%)</title><rect x="1148.3" y="165" width="7.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1151.34" y="175.5" ></text>
</g>
<g >
<title>runtime.memmove (4 samples, 0.50%)</title><rect x="10.0" y="149" width="6.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>aeshashbody (13 samples, 1.64%)</title><rect x="956.4" y="197" width="19.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="959.38" y="207.5" ></text>
</g>
<g >
<title>runtime.sweepone (6 samples, 0.76%)</title><rect x="1173.6" y="245" width="9.0" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1176.63" y="255.5" ></text>
</g>
<g >
<title>strconv.mult128bitPow10 (18 samples, 2.27%)</title><rect x="422.2" y="101" width="26.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="425.18" y="111.5" >s..</text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func3 (2 samples, 0.25%)</title><rect x="1176.6" y="197" width="3.0" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1179.61" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.13%)</title><rect x="1032.3" y="117" width="1.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1035.27" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (2 samples, 0.25%)</title><rect x="697.5" y="53" width="2.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="700.47" y="63.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocMSpanLocked (1 samples, 0.13%)</title><rect x="1032.3" y="53" width="1.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1035.27" y="63.5" ></text>
</g>
<g >
<title>runtime.(*mspan).nextFreeIndex (1 samples, 0.13%)</title><rect x="865.6" y="165" width="1.5" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="868.61" y="175.5" ></text>
</g>
<g >
<title>runtime.suspendG (2 samples, 0.25%)</title><rect x="1182.6" y="165" width="2.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1185.56" y="175.5" ></text>
</g>
<g >
<title>syscall.Syscall6 (3 samples, 0.38%)</title><rect x="1155.8" y="197" width="4.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1158.78" y="207.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.38%)</title><rect x="1169.2" y="197" width="4.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1172.17" y="207.5" ></text>
</g>
<g >
<title>runtime.gcStart.func2 (1 samples, 0.13%)</title><rect x="700.4" y="133" width="1.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="703.44" y="143.5" ></text>
</g>
<g >
<title>runtime.getMCache (1 samples, 0.13%)</title><rect x="779.3" y="197" width="1.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="782.31" y="207.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.25%)</title><rect x="697.5" y="85" width="2.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="700.47" y="95.5" ></text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.13%)</title><rect x="1187.0" y="165" width="1.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1190.02" y="175.5" ></text>
</g>
<g >
<title>fmt.(*buffer).writeString (7 samples, 0.88%)</title><rect x="588.8" y="133" width="10.5" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="591.84" y="143.5" ></text>
</g>
<g >
<title>runtime.memmove (14 samples, 1.77%)</title><rect x="701.9" y="181" width="20.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="704.93" y="191.5" ></text>
</g>
<g >
<title>runtime.memmove (2 samples, 0.25%)</title><rect x="300.2" y="117" width="2.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="303.16" y="127.5" ></text>
</g>
<g >
<title>runtime.madvise (3 samples, 0.38%)</title><rect x="1169.2" y="133" width="4.4" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1172.17" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mspan).refillAllocCache (1 samples, 0.13%)</title><rect x="865.6" y="149" width="1.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="868.61" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mheap).initSpan (1 samples, 0.13%)</title><rect x="697.5" y="37" width="1.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="700.47" y="47.5" ></text>
</g>
<g >
<title>runtime.mallocgc (16 samples, 2.02%)</title><rect x="1011.4" y="197" width="23.8" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1014.44" y="207.5" >r..</text>
</g>
<g >
<title>fmt.newPrinter (23 samples, 2.90%)</title><rect x="627.5" y="197" width="34.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="630.53" y="207.5" >fm..</text>
</g>
<g >
<title>fmt.(*fmt).init (1 samples, 0.13%)</title><rect x="145.4" y="197" width="1.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="148.41" y="207.5" ></text>
</g>
</g>
</svg>
