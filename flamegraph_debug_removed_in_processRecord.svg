<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>runtime.(*pageAlloc).update (1 samples, 0.13%)</title><rect x="1181.0" y="149" width="1.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1184.05" y="159.5" ></text>
</g>
<g >
<title>memeqbody (28 samples, 3.54%)</title><rect x="536.6" y="197" width="41.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="539.60" y="207.5" >mem..</text>
</g>
<g >
<title>main.(*ChunkReader).processBuffer (747 samples, 94.44%)</title><rect x="32.4" y="245" width="1114.3" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="35.38" y="255.5" >main.(*ChunkReader).processBuffer</text>
</g>
<g >
<title>fmt.(*buffer).writeString (7 samples, 0.88%)</title><rect x="10.0" y="165" width="10.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>runtime.sysUnusedOS (3 samples, 0.38%)</title><rect x="1175.1" y="149" width="4.5" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1178.08" y="159.5" ></text>
</g>
<g >
<title>main.(*ChunkReader).processRecord (637 samples, 80.53%)</title><rect x="196.5" y="229" width="950.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="199.47" y="239.5" >main.(*ChunkReader).processRecord</text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func3 (2 samples, 0.25%)</title><rect x="1179.6" y="197" width="2.9" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1182.56" y="207.5" ></text>
</g>
<g >
<title>syscall.Syscall6 (8 samples, 1.01%)</title><rect x="1146.7" y="197" width="12.0" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1149.74" y="207.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.13%)</title><rect x="761.9" y="101" width="1.5" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="764.86" y="111.5" ></text>
</g>
<g >
<title>runtime.memmove (8 samples, 1.01%)</title><rect x="20.4" y="213" width="12.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="23.44" y="223.5" ></text>
</g>
<g >
<title>runtime.bgscavenge (3 samples, 0.38%)</title><rect x="1175.1" y="261" width="4.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1178.08" y="271.5" ></text>
</g>
<g >
<title>main.(*ChunkReader).startReader (781 samples, 98.74%)</title><rect x="10.0" y="261" width="1165.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >main.(*ChunkReader).startReader</text>
</g>
<g >
<title>math.Max (16 samples, 2.02%)</title><rect x="290.5" y="213" width="23.8" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="293.46" y="223.5" >m..</text>
</g>
<g >
<title>runtime.tracebackPCs (1 samples, 0.13%)</title><rect x="766.3" y="101" width="1.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="769.33" y="111.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (3 samples, 0.38%)</title><rect x="739.5" y="133" width="4.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="742.48" y="143.5" ></text>
</g>
<g >
<title>runtime.pageIndexOf (1 samples, 0.13%)</title><rect x="764.8" y="181" width="1.5" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="767.84" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mspan).init (2 samples, 0.25%)</title><rect x="741.0" y="37" width="3.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="743.97" y="47.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointersChunked (3 samples, 0.38%)</title><rect x="1158.7" y="213" width="4.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1161.67" y="223.5" ></text>
</g>
<g >
<title>runtime.findfunc (1 samples, 0.13%)</title><rect x="766.3" y="69" width="1.5" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="769.33" y="79.5" ></text>
</g>
<g >
<title>runtime.bgsweep (2 samples, 0.25%)</title><rect x="1179.6" y="261" width="2.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1182.56" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (3 samples, 0.38%)</title><rect x="739.5" y="85" width="4.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="742.48" y="95.5" ></text>
</g>
<g >
<title>syscall.RawSyscall6 (8 samples, 1.01%)</title><rect x="1146.7" y="181" width="12.0" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1149.74" y="191.5" ></text>
</g>
<g >
<title>runtime.memmove (8 samples, 1.01%)</title><rect x="1163.1" y="229" width="12.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1166.15" y="239.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (1 samples, 0.13%)</title><rect x="1188.5" y="245" width="1.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1191.51" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (5 samples, 0.63%)</title><rect x="738.0" y="181" width="7.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="740.99" y="191.5" ></text>
</g>
<g >
<title>runtime.getpid (1 samples, 0.13%)</title><rect x="1182.5" y="133" width="1.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1185.54" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.25%)</title><rect x="1179.6" y="213" width="2.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1182.56" y="223.5" ></text>
</g>
<g >
<title>syscall.Pread (8 samples, 1.01%)</title><rect x="1146.7" y="229" width="12.0" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1149.74" y="239.5" ></text>
</g>
<g >
<title>runtime.mProf_Malloc (1 samples, 0.13%)</title><rect x="766.3" y="165" width="1.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="769.33" y="175.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.13%)</title><rect x="1184.0" y="197" width="1.5" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1187.03" y="207.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.forEachP.func5 (1 samples, 0.13%)</title><rect x="1182.5" y="213" width="1.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1185.54" y="223.5" ></text>
</g>
<g >
<title>runtime.(*bmap).keys (1 samples, 0.13%)</title><rect x="324.8" y="213" width="1.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="327.77" y="223.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (3 samples, 0.38%)</title><rect x="1184.0" y="229" width="4.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1187.03" y="239.5" ></text>
</g>
<g >
<title>runtime.bucketMask (1 samples, 0.13%)</title><rect x="339.7" y="213" width="1.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="342.68" y="223.5" ></text>
</g>
<g >
<title>runtime.profilealloc (1 samples, 0.13%)</title><rect x="766.3" y="181" width="1.5" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="769.33" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.38%)</title><rect x="739.5" y="101" width="4.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="742.48" y="111.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (8 samples, 1.01%)</title><rect x="20.4" y="229" width="12.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="23.44" y="239.5" ></text>
</g>
<g >
<title>runtime.acquirem (8 samples, 1.01%)</title><rect x="630.6" y="197" width="11.9" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="633.58" y="207.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (15 samples, 1.90%)</title><rect x="818.5" y="197" width="22.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="821.55" y="207.5" >r..</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.13%)</title><rect x="766.3" y="133" width="1.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="769.33" y="143.5" ></text>
</g>
<g >
<title>aeshashbody (26 samples, 3.29%)</title><rect x="497.8" y="197" width="38.8" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="500.81" y="207.5" >aes..</text>
</g>
<g >
<title>strconv.readFloat (100 samples, 12.64%)</title><rect x="979.7" y="165" width="149.1" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="982.66" y="175.5" >strconv.readFloat</text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.13%)</title><rect x="1184.0" y="181" width="1.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1187.03" y="191.5" ></text>
</g>
<g >
<title>strconv.parseFloatPrefix (188 samples, 23.77%)</title><rect x="866.3" y="197" width="280.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="869.28" y="207.5" >strconv.parseFloatPrefix</text>
</g>
<g >
<title>runtime.gcDrain (3 samples, 0.38%)</title><rect x="1184.0" y="213" width="4.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1187.03" y="223.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.13%)</title><rect x="1188.5" y="197" width="1.5" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1191.51" y="207.5" ></text>
</g>
<g >
<title>syscall.pread (8 samples, 1.01%)</title><rect x="1146.7" y="213" width="12.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1149.74" y="223.5" ></text>
</g>
<g >
<title>runtime.mapaccess2_faststr (164 samples, 20.73%)</title><rect x="341.2" y="213" width="244.6" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="344.18" y="223.5" >runtime.mapaccess2_faststr</text>
</g>
<g >
<title>runtime.preemptM (1 samples, 0.13%)</title><rect x="1182.5" y="165" width="1.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1185.54" y="175.5" ></text>
</g>
<g >
<title>strconv.commonPrefixLenIgnoreCase (1 samples, 0.13%)</title><rect x="978.2" y="165" width="1.5" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="981.17" y="175.5" ></text>
</g>
<g >
<title>main.(*MinMaxAverage).updateWith (35 samples, 4.42%)</title><rect x="238.2" y="213" width="52.3" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="241.24" y="223.5" >main...</text>
</g>
<g >
<title>runtime.getMCache (5 samples, 0.63%)</title><rect x="647.0" y="197" width="7.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="649.99" y="207.5" ></text>
</g>
<g >
<title>runtime.makeslice (3 samples, 0.38%)</title><rect x="1158.7" y="245" width="4.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1161.67" y="255.5" ></text>
</g>
<g >
<title>runtime.futexwakeup (1 samples, 0.13%)</title><rect x="1188.5" y="165" width="1.5" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1191.51" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mspan).nextFreeIndex (1 samples, 0.13%)</title><rect x="744.0" y="165" width="1.4" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="746.96" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (2 samples, 0.25%)</title><rect x="1179.6" y="229" width="2.9" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1182.56" y="239.5" ></text>
</g>
<g >
<title>strconv.special (12 samples, 1.52%)</title><rect x="1128.8" y="165" width="17.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1131.84" y="175.5" ></text>
</g>
<g >
<title>fmt.(*pp).fmtString (7 samples, 0.88%)</title><rect x="10.0" y="197" width="10.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (3 samples, 0.38%)</title><rect x="739.5" y="165" width="4.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="742.48" y="175.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (1 samples, 0.13%)</title><rect x="1188.5" y="229" width="1.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1191.51" y="239.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.13%)</title><rect x="761.9" y="117" width="1.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="764.86" y="127.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.13%)</title><rect x="1188.5" y="213" width="1.5" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1191.51" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (3 samples, 0.38%)</title><rect x="739.5" y="117" width="4.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="742.48" y="127.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.13%)</title><rect x="1182.5" y="229" width="1.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1185.54" y="239.5" ></text>
</g>
<g >
<title>runtime.callers.func1 (1 samples, 0.13%)</title><rect x="766.3" y="117" width="1.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="769.33" y="127.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.38%)</title><rect x="1158.7" y="229" width="4.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1161.67" y="239.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (1 samples, 0.13%)</title><rect x="761.9" y="69" width="1.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="764.86" y="79.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (3 samples, 0.38%)</title><rect x="739.5" y="149" width="4.5" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="742.48" y="159.5" ></text>
</g>
<g >
<title>runtime.strhash (4 samples, 0.51%)</title><rect x="579.9" y="197" width="5.9" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="582.86" y="207.5" ></text>
</g>
<g >
<title>runtime.sweepone (2 samples, 0.25%)</title><rect x="1179.6" y="245" width="2.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1182.56" y="255.5" ></text>
</g>
<g >
<title>runtime.suspendG (1 samples, 0.13%)</title><rect x="1184.0" y="165" width="1.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1187.03" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (3 samples, 0.38%)</title><rect x="739.5" y="69" width="4.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="742.48" y="79.5" ></text>
</g>
<g >
<title>runtime.gcmarknewobject (1 samples, 0.13%)</title><rect x="763.4" y="181" width="1.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="766.35" y="191.5" ></text>
</g>
<g >
<title>runtime.(*scavengerState).run (3 samples, 0.38%)</title><rect x="1175.1" y="245" width="4.5" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1178.08" y="255.5" ></text>
</g>
<g >
<title>runtime.memequal (1 samples, 0.13%)</title><rect x="578.4" y="197" width="1.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="581.37" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mspan).markBitsForIndex (1 samples, 0.13%)</title><rect x="745.4" y="181" width="1.5" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="748.45" y="191.5" ></text>
</g>
<g >
<title>runtime.memmove (7 samples, 0.88%)</title><rect x="10.0" y="149" width="10.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>math.archMin (6 samples, 0.76%)</title><rect x="315.8" y="197" width="9.0" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="318.82" y="207.5" ></text>
</g>
<g >
<title>fmt.(*pp).doPrintf (7 samples, 0.88%)</title><rect x="10.0" y="229" width="10.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (3 samples, 0.38%)</title><rect x="1158.7" y="197" width="4.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1161.67" y="207.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.13%)</title><rect x="1184.0" y="149" width="1.5" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1187.03" y="159.5" ></text>
</g>
<g >
<title>os.(*File).pread (8 samples, 1.01%)</title><rect x="1146.7" y="245" width="12.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1149.74" y="255.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge (3 samples, 0.38%)</title><rect x="1175.1" y="213" width="4.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1178.08" y="223.5" ></text>
</g>
<g >
<title>fmt.Sprintf (15 samples, 1.90%)</title><rect x="10.0" y="245" width="22.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >f..</text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (2 samples, 0.25%)</title><rect x="1179.6" y="181" width="2.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1182.56" y="191.5" ></text>
</g>
<g >
<title>runtime.preemptall (1 samples, 0.13%)</title><rect x="1182.5" y="181" width="1.5" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1185.54" y="191.5" ></text>
</g>
<g >
<title>runtime.madvise (3 samples, 0.38%)</title><rect x="1175.1" y="133" width="4.5" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1178.08" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mspan).refillAllocCache (1 samples, 0.13%)</title><rect x="744.0" y="149" width="1.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="746.96" y="159.5" ></text>
</g>
<g >
<title>runtime.deductAssistCredit (11 samples, 1.39%)</title><rect x="746.9" y="181" width="16.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="749.94" y="191.5" ></text>
</g>
<g >
<title>runtime.scanobject (2 samples, 0.25%)</title><rect x="1185.5" y="197" width="3.0" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1188.52" y="207.5" ></text>
</g>
<g >
<title>runtime.futex (1 samples, 0.13%)</title><rect x="1188.5" y="149" width="1.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1191.51" y="159.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.13%)</title><rect x="1185.5" y="181" width="1.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1188.52" y="191.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (173 samples, 21.87%)</title><rect x="585.8" y="213" width="258.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="588.83" y="223.5" >runtime.slicebytetostring</text>
</g>
<g >
<title>all (791 samples, 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).free (1 samples, 0.13%)</title><rect x="1181.0" y="165" width="1.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1184.05" y="175.5" ></text>
</g>
<g >
<title>runtime.readUintptr (1 samples, 0.13%)</title><rect x="1187.0" y="181" width="1.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1190.02" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.38%)</title><rect x="1184.0" y="245" width="4.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1187.03" y="255.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (8 samples, 1.01%)</title><rect x="1163.1" y="245" width="12.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1166.15" y="255.5" ></text>
</g>
<g >
<title>internal/runtime/syscall.Syscall6 (8 samples, 1.01%)</title><rect x="1146.7" y="165" width="12.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1149.74" y="175.5" ></text>
</g>
<g >
<title>runtime.releasem (2 samples, 0.25%)</title><rect x="840.9" y="197" width="3.0" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="843.92" y="207.5" ></text>
</g>
<g >
<title>runtime.forEachPInternal (1 samples, 0.13%)</title><rect x="1182.5" y="197" width="1.5" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1185.54" y="207.5" ></text>
</g>
<g >
<title>runtime.(*unwinder).next (1 samples, 0.13%)</title><rect x="766.3" y="85" width="1.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="769.33" y="95.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.13%)</title><rect x="761.9" y="149" width="1.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="764.86" y="159.5" ></text>
</g>
<g >
<title>runtime.morestack (1 samples, 0.13%)</title><rect x="1188.5" y="261" width="1.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1191.51" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (76 samples, 9.61%)</title><rect x="654.5" y="197" width="113.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="657.45" y="207.5" >runtime.mallocgc</text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge.func1 (3 samples, 0.38%)</title><rect x="1175.1" y="181" width="4.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1178.08" y="191.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (4 samples, 0.51%)</title><rect x="1182.5" y="261" width="6.0" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1185.54" y="271.5" ></text>
</g>
<g >
<title>math.archMax (8 samples, 1.01%)</title><rect x="302.4" y="197" width="11.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="305.39" y="207.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.13%)</title><rect x="761.9" y="165" width="1.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="764.86" y="175.5" ></text>
</g>
<g >
<title>runtime.alignUp (3 samples, 0.38%)</title><rect x="642.5" y="197" width="4.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="645.52" y="207.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.13%)</title><rect x="761.9" y="133" width="1.5" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="764.86" y="143.5" ></text>
</g>
<g >
<title>runtime.(*pallocBits).summarize (1 samples, 0.13%)</title><rect x="1181.0" y="133" width="1.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1184.05" y="143.5" ></text>
</g>
<g >
<title>strconv.ParseFloat (203 samples, 25.66%)</title><rect x="843.9" y="213" width="302.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="846.91" y="223.5" >strconv.ParseFloat</text>
</g>
<g >
<title>runtime.forEachP (1 samples, 0.13%)</title><rect x="1182.5" y="245" width="1.5" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1185.54" y="255.5" ></text>
</g>
<g >
<title>math.Min (7 samples, 0.88%)</title><rect x="314.3" y="213" width="10.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="317.32" y="223.5" ></text>
</g>
<g >
<title>fmt.(*fmt).fmtS (7 samples, 0.88%)</title><rect x="10.0" y="181" width="10.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).initSpan (3 samples, 0.38%)</title><rect x="739.5" y="53" width="4.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="742.48" y="63.5" ></text>
</g>
<g >
<title>strconv.atof64exact (44 samples, 5.56%)</title><rect x="912.5" y="165" width="65.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="915.53" y="175.5" >strconv..</text>
</g>
<g >
<title>runtime.sysUnused (3 samples, 0.38%)</title><rect x="1175.1" y="165" width="4.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1178.08" y="175.5" ></text>
</g>
<g >
<title>runtime.(*scavengerState).init.func2 (3 samples, 0.38%)</title><rect x="1175.1" y="229" width="4.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1178.08" y="239.5" ></text>
</g>
<g >
<title>runtime.signalM (1 samples, 0.13%)</title><rect x="1182.5" y="149" width="1.5" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1185.54" y="159.5" ></text>
</g>
<g >
<title>fmt.(*pp).printArg (7 samples, 0.88%)</title><rect x="10.0" y="213" width="10.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.13%)</title><rect x="1188.5" y="181" width="1.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1191.51" y="191.5" ></text>
</g>
<g >
<title>runtime.add (9 samples, 1.14%)</title><rect x="326.3" y="213" width="13.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="329.26" y="223.5" ></text>
</g>
<g >
<title>runtime.memmove (34 samples, 4.30%)</title><rect x="767.8" y="197" width="50.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="770.83" y="207.5" >runti..</text>
</g>
<g >
<title>strconv.atof64 (180 samples, 22.76%)</title><rect x="878.2" y="181" width="268.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="881.22" y="191.5" >strconv.atof64</text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.13%)</title><rect x="761.9" y="85" width="1.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="764.86" y="95.5" ></text>
</g>
<g >
<title>runtime.callers (1 samples, 0.13%)</title><rect x="766.3" y="149" width="1.5" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="769.33" y="159.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.38%)</title><rect x="1175.1" y="197" width="4.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1178.08" y="207.5" ></text>
</g>
</g>
</svg>
